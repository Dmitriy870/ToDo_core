version: '3.8'

services:
  db:
    image: postgres:13
    container_name: core_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - core_network

  redis:
    image: redis:7
    container_name: core_redis
    networks:
      - core_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - core_network
    healthcheck:
      test: [ "CMD", "nc", "-zv", "localhost", "2181" ]
      interval: 20s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - core_network
    healthcheck:
      test: [ "CMD", "nc", "-zv", "kafka", "9092" ]
      interval: 20s
      timeout: 10s
      retries: 3



  core:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: core_app

    volumes:
      - ./todocore:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - kafka
    #    environment:
    #      DEBUG: ${DEBUG}
    #      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    #      REDIS_URL: ${REDIS_URL}
    #      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    env_file:
      - .env
    networks:
      - core_network

  celery_flower:
    image: mher/flower
    container_name: celery_flower
    ports:
      - "5555:5555"
    env_file:
      - .env
    networks:
      - core_network


  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: core_celery
    depends_on:
      - db
      - redis
    env_file:
      - .env
    entrypoint: [ "/entrypoint_celery.sh" ]
    networks:
      - core_network

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: core_celery_beat
    depends_on:
      - db
      - redis
    env_file:
      - .env
    entrypoint: [ "/entrypoint_celery.sh" ]
    networks:
      - core_network


networks:
  core_network:
    external: true

volumes:
  postgres_data:
