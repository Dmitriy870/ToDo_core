version: '3.8'

services:
  db:
    image: postgres:13
    container_name: core_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - core_network

  redis:
    image: redis:7
    container_name: core_redis
    networks:
      - core_network

  kafka:
    image: bitnami/kafka:3.4
    container_name: core_kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
    networks:
      - core_network

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: core_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - core_network

  core:
    build: .
    container_name: core_app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - kafka
    environment:
      DEBUG: ${DEBUG}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - core_network

  celery:
    build: .
    container_name: core_celery
    command: celery -A core worker --loglevel=info
    depends_on:
      - db
      - redis
      - kafka
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - core_network

  celery-beat:
    build: .
    container_name: core_celery_beat
    command: celery -A core beat --loglevel=info
    depends_on:
      - db
      - redis
      - kafka
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - core_network

networks:
  core_network:
    external: true

volumes:
  postgres_data:
